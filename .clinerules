# Project Rules and Patterns

## Development Patterns

### Package Management
- Use pnpm for package management (pnpm@10.6.4)
- Use Corepack for package manager version consistency
- Bun is used for running scripts and tests only
- Save type errors and dependency installations until ready to address them

### Database
- PostgreSQL with Drizzle ORM is the primary database
- Use Docker-based development environment for PostgreSQL
- Implement read/write separation for scalability
- Use transaction support with retry logic

### Testing
- Focus on component tests as primary testing strategy
- Use Docker-Compose for real database and infrastructure testing
- Implement a fake MQ for message queue testing
- Follow the testing plan outlined in memory-bank/testingPlan.md

### Code Organization
- Use service-based architecture
- Implement plugin system with module federation for extensibility
- Follow clean architecture principles
- Use TypeScript strict mode

### Monorepo Structure
- Use Turborepo for build orchestration and caching
- pnpm workspaces for dependency management
- Separate backend and frontend as distinct workspaces

### Build System
- Use RSPack for backend building
- Use RSBuild for frontend building
- Support for module federation
- Optimized for TypeScript

## Project Preferences

### Code Style
- Use ESLint and Prettier for code formatting
- Follow TypeScript strict mode guidelines
- Organize imports consistently
- Use consistent naming conventions

### Error Handling
- Implement granular error types
- Use graceful degradation strategies
- Implement comprehensive error logging
- Use error recovery mechanisms

### JSON Sanitization
- Sanitize JSON throughout the transformation pipeline
- Handle BOM characters properly
- Handle nested stringified JSON
- Implement proper error handling for malformed JSON

### Deployment
- Deploy to Railway using Docker containers
- Use Kubernetes for orchestration
- Implement CI/CD with GitHub Actions
- Use environment-specific configurations

### Security
- Implement proper database security measures
- Plan for Web3Auth integration in frontend
- Use secure headers and CORS policies
- Implement audit logging for sensitive operations

## Critical Implementation Paths

### Content Flow
1. Twitter submission → SubmissionService
2. Moderation via Twitter → Status update
3. ProcessorService → Global transforms
4. DistributionService → Distributor-specific transforms
5. Distribution to configured channels

### Plugin System
1. PluginService loads plugins at runtime via module federation
2. Plugins register with appropriate service
3. Services use plugins based on configuration
4. Error handling and recovery for plugin failures

### Database Operations
1. Connection pooling with read/write separation
2. Transaction support with retry logic
3. Error handling and connection management
4. Type-safe queries with Drizzle ORM

## Current Focus Areas

### Comprehensive Error Handling
- Implementing granular error types across the application
- Developing consistent error recovery mechanisms
- Enhancing error logging and monitoring
- Creating user-friendly error messages
- Implementing graceful degradation strategies

### Configuration in Database
- Migrating from JSON-based configuration to database storage
- Implementing configuration versioning
- Creating admin interface for configuration management
- Ensuring backward compatibility
- Implementing validation and security measures

### Test Coverage
- Expanding component tests for key flows
- Implementing integration tests for external services
- Adding E2E tests for critical user journeys
- Improving test infrastructure with Docker
- Implementing performance testing

### Web3Auth Security
- Implementing secure authentication with Web3Auth
- Adding database protections for user data
- Creating proper access control mechanisms
- Implementing audit logging
- Ensuring compliance with security best practices
