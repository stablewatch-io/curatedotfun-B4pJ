/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as TestImport } from "./routes/test";
import { Route as SettingsImport } from "./routes/settings";
import { Route as LeaderboardImport } from "./routes/leaderboard";
import { Route as IndexImport } from "./routes/index";
import { Route as FeedIndexImport } from "./routes/feed/index";
import { Route as FeedFeedIdImport } from "./routes/feed/$feedId";

// Create/Update Routes

const TestRoute = TestImport.update({
  id: "/test",
  path: "/test",
  getParentRoute: () => rootRoute,
} as any);

const SettingsRoute = SettingsImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => rootRoute,
} as any);

const LeaderboardRoute = LeaderboardImport.update({
  id: "/leaderboard",
  path: "/leaderboard",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const FeedIndexRoute = FeedIndexImport.update({
  id: "/feed/",
  path: "/feed/",
  getParentRoute: () => rootRoute,
} as any);

const FeedFeedIdRoute = FeedFeedIdImport.update({
  id: "/feed/$feedId",
  path: "/feed/$feedId",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/leaderboard": {
      id: "/leaderboard";
      path: "/leaderboard";
      fullPath: "/leaderboard";
      preLoaderRoute: typeof LeaderboardImport;
      parentRoute: typeof rootRoute;
    };
    "/settings": {
      id: "/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof SettingsImport;
      parentRoute: typeof rootRoute;
    };
    "/test": {
      id: "/test";
      path: "/test";
      fullPath: "/test";
      preLoaderRoute: typeof TestImport;
      parentRoute: typeof rootRoute;
    };
    "/feed/$feedId": {
      id: "/feed/$feedId";
      path: "/feed/$feedId";
      fullPath: "/feed/$feedId";
      preLoaderRoute: typeof FeedFeedIdImport;
      parentRoute: typeof rootRoute;
    };
    "/feed/": {
      id: "/feed/";
      path: "/feed";
      fullPath: "/feed";
      preLoaderRoute: typeof FeedIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/leaderboard": typeof LeaderboardRoute;
  "/settings": typeof SettingsRoute;
  "/test": typeof TestRoute;
  "/feed/$feedId": typeof FeedFeedIdRoute;
  "/feed": typeof FeedIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/leaderboard": typeof LeaderboardRoute;
  "/settings": typeof SettingsRoute;
  "/test": typeof TestRoute;
  "/feed/$feedId": typeof FeedFeedIdRoute;
  "/feed": typeof FeedIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/leaderboard": typeof LeaderboardRoute;
  "/settings": typeof SettingsRoute;
  "/test": typeof TestRoute;
  "/feed/$feedId": typeof FeedFeedIdRoute;
  "/feed/": typeof FeedIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/leaderboard"
    | "/settings"
    | "/test"
    | "/feed/$feedId"
    | "/feed";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/leaderboard" | "/settings" | "/test" | "/feed/$feedId" | "/feed";
  id:
    | "__root__"
    | "/"
    | "/leaderboard"
    | "/settings"
    | "/test"
    | "/feed/$feedId"
    | "/feed/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  LeaderboardRoute: typeof LeaderboardRoute;
  SettingsRoute: typeof SettingsRoute;
  TestRoute: typeof TestRoute;
  FeedFeedIdRoute: typeof FeedFeedIdRoute;
  FeedIndexRoute: typeof FeedIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LeaderboardRoute: LeaderboardRoute,
  SettingsRoute: SettingsRoute,
  TestRoute: TestRoute,
  FeedFeedIdRoute: FeedFeedIdRoute,
  FeedIndexRoute: FeedIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/leaderboard",
        "/settings",
        "/test",
        "/feed/$feedId",
        "/feed/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/leaderboard": {
      "filePath": "leaderboard.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/feed/$feedId": {
      "filePath": "feed/$feedId.tsx"
    },
    "/feed/": {
      "filePath": "feed/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
